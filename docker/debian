# vim: filetype=dockerfile:
#
# Install piac external libraries
#
# This image is intended to prepare a docker image that contains the external
# libraries pre-installed. The image is parked at
#
# https://hub.docker.com/repository/docker/jbakosi/
#
# which can then be pulled by continuous integration (CI) to build and test
# piac. This ensures the external libs do not have to be rebuilt, any time piac
# needs to be tested, which reduces load on CI.
#
# Usage:
#
# docker build -f debian -t piac-gnu . #--build-arg COMMIT=master --no-cache
# docker-squash --cleanup piac-gnu -t jbakosi/piac-gnu
# docker push jbakosi/piac-gnu

FROM debian:bullseye

# Install system-wide prerequisites
RUN echo "deb http://deb.debian.org/debian/ bullseye-backports main" >> /etc/apt/sources.list
RUN apt-get update -y && apt-get install -y git cmake g++ pkg-config libssl-dev libunbound-dev libminiupnpc-dev libboost-chrono-dev libboost-date-time-dev libboost-filesystem-dev libboost-locale-dev libboost-program-options-dev libboost-regex-dev libboost-serialization-dev libboost-system-dev libboost-thread-dev libzmq3-dev libhidapi-dev libprotobuf-dev libusb-dev libxapian-dev rapidjson-dev libreadline-dev libcrypto++-dev libssl-dev libolm-dev/bullseye-backports nlohmann-json3-dev libevent-dev libcurl4-openssl-dev libspdlog-dev

# Clone piac
RUN git clone https://codeberg.org/piac/piac.git
ARG COMMIT
RUN cd piac && git checkout $COMMIT && git log -1 HEAD

# Build external libs
RUN cd piac && mkdir -p external/build && cd external/build && cmake .. && make -sj$(grep -c processor /proc/cpuinfo)

# Clean up
RUN rm -rf piac/external/build

# The commands below can be used to build and test piac if anything
# upstream is updated. After no error, they should be commented.

# Build piac
#RUN cd piac && mkdir -p build && cd build && cmake .. && make -sj$(grep -c processor /proc/cpuinfo)
# Run tests
#RUN cd piac/build && ctest -j$(grep -c processor /proc/cpuinfo) -LE matrix
